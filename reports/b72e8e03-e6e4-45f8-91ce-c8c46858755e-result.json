{"name": "test_product_selection", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Item in Cart", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d2f830d1c15eabb61de960a925308e28\")>\n\n    @allure.feature('Men')\n    @pytest.mark.men\n    def test_product_selection(driver):\n        men = Men(driver)\n        men.open_men_page()\n        men.button_men()\n        men.click_button_sort_items()\n        men.click_button_size_and_color_selection()\n        men.click_button_add_product_to_cart()\n        men.click_button_cart()\n>       assert men.check_that_product_in_cart()\n\ntests\\test_men_page.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\men_page.py:70: in check_that_product_in_cart\n    wait.until((EC.visibility_of_element_located(check_that_items_in_cart)),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d2f830d1c15eabb61de960a925308e28\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000002A937F6A0E0>, message = 'Item in Cart'\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Item in Cart\n\n..\\..\\diplom_project\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "start": 1670881854100, "stop": 1670881867442, "uuid": "5aac9af1-75a9-4772-af5d-129066a61b67", "historyId": "a11f585a073b79ee30249c8674b94a3a", "testCaseId": "8b21091e2ce0484a8415576b3cff9c49", "fullName": "tests.test_men_page#test_product_selection", "labels": [{"name": "feature", "value": "Men"}, {"name": "tag", "value": "men"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_men_page"}, {"name": "host", "value": "LAPTOP-IVBD6KDU"}, {"name": "thread", "value": "8820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_men_page"}]}